// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TeamType {
  CLUB
  SELECTION
}

enum ChampType {
  LEAGUE
  CUP
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String   @unique
  email     String   @unique
  hash      String
  isAdmin   Boolean  @default(false)

  @@map("users")
}

model Team {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String   @unique
  country   String
  shieldUrl String
  shieldKey String
  stadium   String
  teamType  TeamType
  code      String
  home      Game[]   @relation(name: "home")
  away      Game[]   @relation(name: "away")

  @@map("teams")
}

// From here is still being thought
model Champ {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  name      String    @unique
  country   String
  shieldUrl String
  shieldKey String
  champType ChampType
  groups    Group[]
  rounds    Round[]

  @@map("champs")
}

model Group {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  champId   String
  champ     Champ    @relation(fields: [champId], references: [id], onDelete: Cascade)
  rounds    Round[]
  games     Game[]

  @@map("groups")
}

model Round {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String
  champId     String
  champ       Champ    @relation(fields: [champId], references: [id], onDelete: Cascade)
  games       Game[]
  groupId     String?
  group       Group?   @relation(fields: [groupId], references: [id], onDelete: Cascade)
  playOffs    Boolean  @default(false)
  numberGames Int

  @@map("rounds")
}

model Game {
  id            String   @id @default(uuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  homeId        String
  home          Team     @relation(name: "home", fields: [homeId], references: [id])
  homeScore     Int?
  awayId        String
  away          Team     @relation(name: "away", fields: [awayId], references: [id])
  awayScore     Int?
  roundId       String
  round         Round    @relation(fields: [roundId], references: [id], onDelete: Cascade)
  groupId       String?
  group         Group?   @relation(fields: [groupId], references: [id], onDelete: Cascade)
  playOffs      Boolean  @default(false)
  homeKickScore Int?
  awayKickScore Int?

  @@map("games")
}
