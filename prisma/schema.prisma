// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TeamType {
  CLUB
  SELECTION
}

enum ChampType {
  LEAGUE
  CUP
}

enum GroupType {
  A
  B
  C
  D
  E
  F
  G
  H
  I
  J
  K
  L
  M
  N
  O
  P
  Q
  R
  S
  T
  U
  V
  W
  X
  Y
  Z
}

enum RoundType {
  Play_offs
  Round_of_16
  Quarter_finals
  Semi_finals
  Third_place
  Final
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String   @unique
  email     String   @unique
  hash      String
  isAdmin   Boolean  @default(false)
  cash      Float    @default(0)

  @@map("users")
}

model Team {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String   @unique
  country   String
  shieldUrl String
  shieldKey String
  stadium   String
  teamType  TeamType
  code      String
  home      Game[]   @relation(name: "home")
  away      Game[]   @relation(name: "away")

  @@map("teams")
}

// From here is still being thought
model Champ {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  name      String    @unique
  country   String
  shieldUrl String
  shieldKey String
  champType ChampType
  groups    Group[]
  Game      Game[]

  @@map("champs")
}

model Group {
  id        String     @id @default(uuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  name      GroupType?
  order     Int
  champId   String
  champ     Champ      @relation(fields: [champId], references: [id], onDelete: Cascade)
  rounds    Round[]
  games     Game[]

  @@map("groups")
}

model Round {
  id          String     @id @default(uuid())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  name        RoundType?
  order       Int
  games       Game[]
  groupId     String
  group       Group      @relation(fields: [groupId], references: [id], onDelete: Cascade)
  playOffs    Boolean    @default(false)
  numberGames Int

  @@map("rounds")
}

model Game {
  id            String   @id @default(uuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  homeId        String
  home          Team     @relation(name: "home", fields: [homeId], references: [id])
  homeScore     Int?
  awayId        String
  away          Team     @relation(name: "away", fields: [awayId], references: [id])
  awayScore     Int?
  roundId       String?
  round         Round?   @relation(fields: [roundId], references: [id], onDelete: Cascade)
  champId       String?
  champ         Champ?   @relation(fields: [champId], references: [id], onDelete: Cascade)
  playOffs      Boolean  @default(false)
  homeKickScore Int?
  awayKickScore Int?
  start         DateTime
  Group         Group?   @relation(fields: [groupId], references: [id])
  groupId       String?
  Match         Match[]

  @@map("games")
}

//------------------------------------------------------ \\

model League {
  id              String   @id @default(uuid())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  name            String
  playersAmount   Int
  playersAccepted Int      @default(0)
  phasesAmount    Int
  matchesAmount   Int
  subscription    Float
  isPrivate       Boolean  @default(false)
  start           DateTime

  @@map("leagues")
}

model Phase {
  id               String   @id @default(uuid())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  order            Int
  name             String?
  leagueId         String
  matchesAmount    Int
  fullMatches      Int      @default(0)
  isPlayOffs       Boolean  @default(false)
  playerKickAmount Int      @default(0)
  isAvailable      Boolean  @default(true)
  Match            Match[]

  @@map("phases")
}

model Match {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  gameId      String
  game        Game     @relation(fields: [gameId], references: [id])
  phaseId     String
  phase       Phase    @relation(fields: [phaseId], references: [id])
  isAvailable Boolean  @default(true)

  @@map("matches")
}
